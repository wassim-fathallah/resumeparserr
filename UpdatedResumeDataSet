import os
import re
import spacy
from spacy.matcher import PhraseMatcher

# Load English tokenizer, tagger, parser, NER and word vectors
nlp = spacy.load("en_core_web_sm")

# Regular expression pattern to match names
name_pattern = r'^[A-Z][a-z]+(?: [A-Z][a-z]+)?'  # Updated pattern to allow for middle names or initials

# Function to extract skills from text
def extract_skills(text):
    skills = []
    # Process the text with Spacy
    doc = nlp(text.lower())
    # Iterate through matches
    matches = skills_matcher(doc)
    for match_id, start, end in matches:
        span = doc[start:end]
        skills.append(span.text)
    # Return unique skills
    return list(set(skills))

# Read skills from file
def read_skills_from_file(file_path):
    with open(file_path, "r", encoding='utf-8') as file:
        skills = [line.strip().lower() for line in file if line.strip()]
    return skills

# Define PhraseMatcher for skills
def create_phrase_matcher(patterns):
    matcher = PhraseMatcher(nlp.vocab, attr="LOWER")
    patterns = [nlp(skill.lower()) for skill in patterns]
    matcher.add("SKILLS", None, *patterns)
    return matcher

# Function to extract email from text
    """def extract_email_from_resume(text):
    # Use regex pattern to find potential email addresses
    email_matches = re.findall(r'\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b', text)
    
    # Iterate over matches and extract the phrases containing the email addresses
    phrases = []
    for email in email_matches:
        start_index = text.find(email)
        end_index = start_index + len(email)
        
        # Find the start and end of the phrase containing the email address
        while start_index > 0 and text[start_index] != ' ':
            start_index -= 1
        while end_index < len(text) and text[end_index] != ' ':
            end_index += 1
        
        # Extract the phrase containing the email address
        phrase = text[start_index:end_index].strip()
        phrases.append(phrase)
    
    return phrases"""
def extract_email_from_resume(text):
    email_regex = r"\b([\w]+[.]?[\w]+@+[a-zA-Z]+[.][a-zA-Z]+)\b"
    match = re.findall(email_regex, text)
    email = ""
    if match:
        email = (''.join(str(elem) for elem in str(match[0]).replace("\n","")))  
    return (email)
# Function to extract phone numbers from text
def extract_phone_numbers(text):
    # Use regex pattern to find potential phone numbers
    phone_numbers = re.findall(r'[\+\(]?[1-9][0-9 .\-\(\)]{8,}[0-9]', text)
    # Filter out numbers with exactly 11 or 8 digits and not containing /
    filtered_numbers = []
    for number in phone_numbers:
        # Check if the number contains /
        if '/' in number:
            continue  # Skip numbers with /
        
        digits_only = re.sub(r'\D', '', number)
        if 8 <= len(digits_only) <= 11:
            # Check if the number starts with '+'
            if number.startswith(' +') | number.startswith('+ ') | number.startswith('+'):
                filtered_numbers.insert(0, digits_only)
            else:
                filtered_numbers.append(digits_only)
    # Return only the first and second element of the filtered numbers list
    if filtered_numbers:
        return filtered_numbers
    else:
        return None

# Function to extract skills, email, and phone number from a resume
def extract_info_from_resume(text):
    skills_in_resume = extract_skills(text)
    email_in_resume = extract_email_from_resume(text)
    phone_numbers_in_resume = extract_phone_numbers(text)
    return skills_in_resume, email_in_resume, phone_numbers_in_resume

# Function to extract universities from the file
def extract_universities(file_path):
    with open(file_path, "r", encoding='utf-8') as file:
        universities = {line.strip() for line in file if line.strip()}  # Use a set to remove duplicates
    return universities

# Directory containing the resumes
resume_directory = r'C:\wassim_fathallah_ooredoo\CVs'
universities_file = r'G:\wassim_fathallah_ooredoo\faculty.txt'
softskills_file = r'G:\wassim_fathallah_ooredoo\skills.txt'

# Get all .txt files in the directory
resume_paths = [os.path.join(resume_directory, file) for file in os.listdir(resume_directory) if file.endswith('.txt')]

# Extract universities and soft skills from the files
universities = extract_universities(universities_file)
softskills_list = read_skills_from_file(softskills_file)
skills_matcher = create_phrase_matcher(softskills_list)

# Process resumes and extract names, skills, email, phone number, universities, and soft skills
for idx, path in enumerate(resume_paths):
    # Extract name from filename
    file_name = os.path.splitext(os.path.basename(path))[0]  # Get filename without extension
    name_parts = re.findall(r'[A-Z][a-z]*', file_name)  # Split name based on uppercase letters
    name = ' '.join(name_parts)  # Join name parts with space
    if not name:
        name = None  # Set name to None if no uppercase letters found
    
    with open(path, 'r', encoding='utf-8') as file:
        resume_text = file.read()
    
    # Preprocess text: Remove non-alphanumeric characters and extra whitespaces
    #resume_text = re.sub(r'\W+', ' ', resume_text)
    #resume_text = ' '.join(resume_text.split())  # Remove extra whitespaces
    
    # Extract Skills, Email, and Phone Numbers
    skills_in_resume, email_in_resume, phone_numbers_in_resume = extract_info_from_resume(resume_text)
    
    # Extract Universities
    universities_in_resume = []
    for university in universities:
        if university.lower() in resume_text.lower():
            universities_in_resume.append(university)
    
    # Extract Soft Skills
    doc = nlp(resume_text.lower())
    softskills_in_resume = [doc[start:end].text for match_id, start, end in skills_matcher(doc)]
    
    # Print Results
    print(f"Resume {idx + 1}:")
    print("Name:", name)
    print("Skills:", skills_in_resume)
    print ("Email:", email_in_resume)
    print("Phone numbers:", phone_numbers_in_resume)
    print("Universities:", universities_in_resume)
    print()
